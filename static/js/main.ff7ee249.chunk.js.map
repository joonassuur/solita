{"version":3,"sources":["redux/AppActions.tsx","redux/Selectors.tsx","redux/AppReducer.tsx","redux/RootReducer.tsx","redux/ConfigureStore.tsx","components/header/Header.tsx","components/app/App.tsx","serviceWorker.tsx","index.tsx"],"names":["fetchStoreData","createAsyncThunk","a","fetch","res","json","toJson","modifyCart","createAction","item","payload","toggleModal","isOpen","getProducts","state","app","products","getCart","cart","cartQuantity","Object","values","reduce","itemCount","quantity","cartTotalCost","totalCost","map","cartItem","product","id","price","length","flat","subTotal","totalProductCost","cartQuantityString","getIsModalOpen","isModalOpen","createSlice","name","initialState","reducers","extraReducers","fulfilled","toString","rejected","clonedCart","_","cloneDeep","existingItemFilter","filter","push","rootReducer","combineReducers","reducer","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","composeWithDevTools","applyMiddleware","thunk","persistor","persistStore","Header","navigateToCart","navigateToStore","useSelector","className","onClick","App","dispatch","useDispatch","history","useHistory","Main","lazy","Cart","Contact","handleNavigateToCart","handleNavigateToStore","handleModal","route","useEffect","fallback","exact","path","render","position","hideProgressBar","autoClose","pauseOnFocusLoss","Boolean","window","location","hostname","match","ReactDOM","loading","hashType","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ff7ee249.chunk.js","sourcesContent":["import { createAction, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport products from \"../mockedAPI/products.json\";\r\n\r\nexport const fetchStoreData = createAsyncThunk(\r\n  \"@app: fetchStoreData\",\r\n  async () => {\r\n    if (!process.env.NODE_ENV || process.env.NODE_ENV === \"development\") {\r\n      // fake the api call for development mode\r\n      const res = products;\r\n      return res;\r\n    } else {\r\n      // for production\r\n      const res = await fetch(\"/api/products\");\r\n      const toJson = await res.json();\r\n      return toJson;\r\n    }\r\n  }\r\n);\r\nexport const modifyCart = createAction(\"@app: modifyCart\", item => {\r\n  return { payload: item };\r\n});\r\nexport const toggleModal = createAction(\"@app: toggleModal\", isOpen => {\r\n  return { payload: isOpen };\r\n});\r\n","import { StoreItem, CartItem } from \"../types/Types\";\r\n\r\nexport const getProducts = (state: { app: { products: StoreItem[] } }) =>\r\n  state.app.products;\r\nexport const getCart = (state: {\r\n  app: { cart: CartItem[]; products: StoreItem[] };\r\n}) => {\r\n  const cart = state.app.cart;\r\n  const products = state.app.products;\r\n\r\n  // calculate total amount of items in a cart\r\n  const cartQuantity: number = (() => {\r\n    const cartQuantityReducer = (\r\n      itemCount: number,\r\n      { quantity }: { quantity: number }\r\n    ) => itemCount + quantity;\r\n    return Object.values(cart).reduce(cartQuantityReducer, 0);\r\n  })();\r\n\r\n  // calculate total cost of all items in a cart\r\n  const cartTotalCost: number = (() => {\r\n    const totalCostReducer = (subTotal: number, totalProductCost: number) =>\r\n      subTotal + totalProductCost;\r\n\r\n    const totalCostPerProduct = (() => {\r\n      const totalCost = cart.map((cartItem) =>\r\n        products.map((product) =>\r\n          product.id === cartItem.id ? product.price * cartItem.quantity : 0\r\n        )\r\n      );\r\n      if (totalCost.length > 0) {\r\n        return totalCost;\r\n      }\r\n      return [0];\r\n    })();\r\n\r\n    const totalCost: number = totalCostPerProduct\r\n      .flat()\r\n      .reduce(totalCostReducer);\r\n    return totalCost;\r\n  })();\r\n\r\n  const cartQuantityString: string = (() => {\r\n    if (cartQuantity === 1) {\r\n      return `${cartQuantity} item in cart`;\r\n    }\r\n    if (cartQuantity > 1) {\r\n      return `${cartQuantity} items in cart`;\r\n    }\r\n    return \"No items in cart\";\r\n  })();\r\n\r\n  return { cart, cartQuantity, cartTotalCost, cartQuantityString };\r\n};\r\n\r\nexport const getIsModalOpen = (state: { app: { isModalOpen: boolean } }) =>\r\n  state.app.isModalOpen;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { fetchStoreData, modifyCart, toggleModal } from \"../redux/AppActions\";\r\nimport { Store } from \"../types/Types\";\r\n\r\nimport _ from \"lodash\";\r\n\r\nconst initialState: Store = {\r\n  products: [],\r\n  cart: [],\r\n  isModalOpen: false,\r\n};\r\n\r\nconst app = createSlice({\r\n  name: \"app\",\r\n  initialState,\r\n  reducers: {},\r\n  extraReducers: {\r\n    [fetchStoreData.fulfilled.toString()]: (state, { payload }) => {\r\n      state.products = payload.products;\r\n    },\r\n    [fetchStoreData.rejected.toString()]: (state) => {\r\n      return state;\r\n    },\r\n    [modifyCart.toString()]: (state, { payload }) => {\r\n      const clonedCart = _.cloneDeep(state.cart);\r\n      const existingItemFilter = clonedCart.filter(\r\n        (cartItem) => cartItem.id === payload.id\r\n      );\r\n      \r\n      if (existingItemFilter.length > 0) {\r\n        clonedCart.map((cartItem) =>\r\n          cartItem.id === existingItemFilter[0].id\r\n            ? (cartItem.quantity = payload.quantity)\r\n            : false\r\n        );\r\n      } else {\r\n        clonedCart.push(payload);\r\n      }\r\n\r\n      state.cart = clonedCart;\r\n    },\r\n    [toggleModal.toString()]: (state, { payload }) => {\r\n      state.isModalOpen = payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport default app;\r\n","import { combineReducers } from \"redux\";\r\nimport app from \"./AppReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  app: app.reducer,\r\n});\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware  } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport rootReducer from \"./RootReducer\";\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport let store = createStore(persistedReducer, composeWithDevTools(applyMiddleware(thunk)));\r\nexport let persistor = persistStore(store);\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCart } from \"../../redux/Index\";\r\n\r\nimport \"./Header.scss\";\r\ninterface PropsInterface {\r\n  navigateToStore: (route?: string) => void;\r\n  navigateToCart: (route?: string) => void;\r\n}\r\nconst Header: React.FC<PropsInterface> = ({\r\n  navigateToCart,\r\n  navigateToStore,\r\n}) => {\r\n  const { cartTotalCost, cartQuantityString } = useSelector(getCart);\r\n\r\n  return (\r\n    <header id=\"header-container\">\r\n      <div className=\"header\">\r\n        <div className=\"container\">\r\n          <div className=\"store-name\">\r\n            <div className=\"logo\" onClick={() => navigateToStore()}>\r\n              whee\r\n            </div>\r\n            <div className=\"description\">\r\n              The most definitive shape store in the world\r\n            </div>\r\n          </div>\r\n          <div className=\"cart-display\">\r\n            <div className=\"cart\">\r\n              <div className=\"cart-quantity\">{cartQuantityString}</div>\r\n              <div className=\"cart-cost\">{`Total: ${cartTotalCost} €`}</div>\r\n            </div>\r\n            <div className=\"cart-icon\" onClick={() => navigateToCart()}>\r\n              <span className=\"material-icons\">shopping_cart</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useEffect, lazy, Suspense } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { Route, Switch, useHistory } from \"react-router-dom\";\r\n\r\nimport Header from \"../header/Header\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { ToastProvider } from \"react-toast-notifications\";\r\n\r\nimport { fetchStoreData, toggleModal } from \"../../redux/Index\";\r\n\r\nimport \"./App.scss\";\r\n\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const history = useHistory();\r\n\r\n  const Main = lazy(() => import(\"../main/Main\"));\r\n  const Cart = lazy(() => import(\"../cart/Cart\"));\r\n  const Contact = lazy(() => import(\"../contact/Contact\"));\r\n\r\n  const handleNavigateToCart = () => {\r\n    history.push(\"/cart\");\r\n  };\r\n  const handleNavigateToStore = () => {\r\n    history.push(\"/\");\r\n  };\r\n  const handleModal = (route?: string) => {\r\n    if (route === \"contact\") {\r\n      history.push(\"/contact\");\r\n    }\r\n    dispatch(toggleModal(false));\r\n  };\r\n\r\n  useEffect(() => {\r\n    dispatch(fetchStoreData());\r\n  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <ToastProvider>\r\n        <Header\r\n          navigateToCart={handleNavigateToCart}\r\n          navigateToStore={handleNavigateToStore}\r\n        />\r\n        <Suspense fallback={<div>Loading...</div>}>\r\n          <Switch>\r\n            <Route\r\n              exact\r\n              path={`/`}\r\n              render={() => <Main handleModal={handleModal} />}\r\n            />\r\n            <Route\r\n              exact\r\n              path={`/cart`}\r\n              render={() => <Cart navigateToStore={handleNavigateToStore} />}\r\n            />\r\n            <Route\r\n              exact\r\n              path={`/contact`}\r\n              render={() => <Contact navigateToCart={handleNavigateToCart} />}\r\n            />\r\n          </Switch>\r\n        </Suspense>\r\n        <ToastContainer\r\n          position=\"bottom-center\"\r\n          hideProgressBar={false}\r\n          autoClose={1500}\r\n          pauseOnFocusLoss={false}\r\n        />\r\n      </ToastProvider>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\nimport { PersistGate } from \"redux-persist/integration/react\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\n\r\nimport { store, persistor } from \"./redux/ConfigureStore\";\r\nimport \"./index.scss\";\r\n\r\nimport App from \"./components/app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <PersistGate loading={null} persistor={persistor}>\r\n      <Router hashType={\"slash\"}>\r\n        <App />\r\n      </Router>\r\n    </PersistGate>\r\n  </Provider>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}