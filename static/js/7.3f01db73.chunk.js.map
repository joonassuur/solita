{"version":3,"sources":["components/store-items/StoreItems.tsx","components/contact/Contact.tsx"],"names":["StoreItems","cartAction","buttonText","renderElement","dispatch","useDispatch","useSelector","getCart","cart","cartQuantity","products","getProducts","notify","toastString","toast","renderItemList","product","quantity","key","id","className","title","name","toLowerCase","price","description","onClick","storeItem","cartFilter","existingItemInCart","filter","cartItem","length","cartFilterCopy","_","cloneDeep","toggleModal","modifyCart","addOrRemoveItem","map","Contact","navigateToCart","cartTotalCost","initialValues","fname","lname","email","address","city","country","indice","onSubmit","values","a","htmlFor","required","aria-required","type"],"mappings":"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","file":"static/js/7.3f01db73.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  modifyCart,\r\n  getCart,\r\n  getProducts,\r\n  toggleModal,\r\n} from \"../../redux/Index\";\r\nimport { StoreItem, CartItem } from \"../../types/Types\";\r\nimport _ from \"lodash\";\r\nimport { toast } from \"react-toastify\";\r\n\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\nimport \"./StoreItems.scss\";\r\n\r\nfunction StoreItems(\r\n  cartAction: string,\r\n  buttonText: string,\r\n  renderElement: string\r\n) {\r\n  // cartAction > accepts either \"add\" or \"remove\"; decide whether the product should be removed or added to cart\r\n  // buttonText > accepts any string; text to display on \"Add to Cart\" buttons.\r\n  // renderElement > string \"cart\" returns a list of cart items, any other string returns products list\r\n\r\n  const dispatch = useDispatch();\r\n  const { cart, cartQuantity } = useSelector(getCart);\r\n  const products = useSelector(getProducts);\r\n\r\n  const notify = (toastString: string) => toast(toastString);\r\n\r\n  const addOrRemoveItem = (storeItem: StoreItem) => {\r\n    const cartFilter: CartItem[] = (() => {\r\n      const existingItemInCart = cart.filter(\r\n        (cartItem) => cartItem.id === storeItem.id\r\n      );\r\n      if (existingItemInCart.length > 0) {\r\n        return existingItemInCart;\r\n      }\r\n      return [{ id: storeItem.id, quantity: 0 }];\r\n    })();\r\n\r\n    let cartFilterCopy = _.cloneDeep(cartFilter[0]);\r\n\r\n    if (cartAction === \"remove\") {\r\n      cartFilterCopy.quantity -= 1;\r\n      notify(\"Item removed from cart\");\r\n    }\r\n    if (cartAction === \"add\") {\r\n      cartFilterCopy.quantity += 1;\r\n      dispatch(toggleModal(true));\r\n      notify(\"Item added to cart\");\r\n    }\r\n\r\n    dispatch(modifyCart(cartFilterCopy));\r\n  };\r\n\r\n  const renderItemList = (product: StoreItem, quantity?: number) => {\r\n    // render cart / product list\r\n    return (\r\n      <div key={product.id} className=\"storeItem\">\r\n        <div\r\n          title={product.name}\r\n          className={`image ${product.name.toLowerCase()}`}\r\n        ></div>\r\n        <div className=\"item-details\">\r\n          <div className=\"name-price\">\r\n            <h1 className=\"product-name\">{product.name}</h1>\r\n            <h1 className=\"product-price\">{`${product.price} â‚¬`}</h1>\r\n          </div>\r\n          <div className=\"desc-btn-quantity\">\r\n            <div className=\"product-desc\">{product.description}</div>\r\n            <div className=\"quantity-btn\">\r\n              {renderElement === \"cart\" && (\r\n                <h3 className=\"product-quantity\">{`Quantity: ${quantity}`}</h3>\r\n              )}\r\n              <button\r\n                className=\"addRemove-btn\"\r\n                onClick={() => addOrRemoveItem(product)}\r\n              >\r\n                {buttonText}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const renderStoreItems = () => {\r\n    if (renderElement === \"cart\" && cartQuantity < 1) {\r\n      return <h2>No items in cart</h2>;\r\n    }\r\n\r\n    return (\r\n      <>\r\n        {products?.map((product: StoreItem) => {\r\n          if (renderElement === \"cart\") {\r\n            // render cart list\r\n            return (\r\n              cart &&\r\n              cart.map((cartItem) => {\r\n                return (\r\n                  // during cart view, render only items that are in cart\r\n                  product.id === cartItem.id &&\r\n                  cartItem.quantity > 0 &&\r\n                  renderItemList(product, cartItem.quantity)\r\n                );\r\n              })\r\n            );\r\n          } else {\r\n            // render product list\r\n            return renderItemList(product);\r\n          }\r\n        })}\r\n      </>\r\n    );\r\n  };\r\n\r\n  return renderStoreItems();\r\n}\r\n\r\nexport default StoreItems;\r\n","import React from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { Formik, Field, Form } from \"formik\";\r\n\r\nimport { getCart } from \"../../redux/Index\";\r\nimport StoreItems from \"../store-items/StoreItems\";\r\nimport \"./Contact.scss\";\r\n\r\ninterface PropsInterface {\r\n  navigateToCart: (route?: string) => void;\r\n}\r\n\r\nconst Contact: React.FC<PropsInterface> = ({ navigateToCart }) => {\r\n  const { cartTotalCost } = useSelector(getCart);\r\n\r\n  return (\r\n    <div id=\"contact\">\r\n      <Formik\r\n        initialValues={{\r\n          fname: \"\",\r\n          lname: \"\",\r\n          email: \"\",\r\n          address: \"\",\r\n          city: \"\",\r\n          country: \"\",\r\n          indice: \"\",\r\n        }}\r\n        onSubmit={async (values) => {}}\r\n      >\r\n        <Form className=\"contact-form\">\r\n          <h1>Contact</h1>\r\n          <div className=\"email\">\r\n            <div className=\"label-field\">\r\n              <label htmlFor=\"email\">Email</label>\r\n              <Field\r\n                id=\"email\"\r\n                required\r\n                aria-required\r\n                name=\"email\"\r\n                type=\"email\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"name\">\r\n            <div className=\"label-field\">\r\n              <label htmlFor=\"first-name\">First name</label>\r\n              <Field\r\n                id=\"first-name\"\r\n                required\r\n                aria-required\r\n                name=\"fname\"\r\n                type=\"text\"\r\n              />\r\n            </div>\r\n            <div className=\"label-field\">\r\n              <label htmlFor=\"last-name\">Last name</label>\r\n              <Field\r\n                id=\"last-name\"\r\n                required\r\n                aria-required\r\n                name=\"lname\"\r\n                type=\"text\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"address\">\r\n            <div className=\"label-field\">\r\n              <label htmlFor=\"address\">Address</label>\r\n              <Field\r\n                id=\"address\"\r\n                required\r\n                aria-required\r\n                name=\"address\"\r\n                type=\"text\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"city\">\r\n            <div className=\"label-field\">\r\n              <label htmlFor=\"city\">City</label>\r\n              <Field id=\"city\" required aria-required name=\"city\" type=\"text\" />\r\n            </div>\r\n          </div>\r\n          <div className=\"country-indice\">\r\n            <div className=\"label-field\">\r\n              <label htmlFor=\"country\">Country</label>\r\n              <Field\r\n                id=\"country\"\r\n                required\r\n                aria-required\r\n                name=\"country\"\r\n                type=\"text\"\r\n              />\r\n            </div>\r\n            <div className=\"label-field\">\r\n              <label htmlFor=\"indice\">Indice</label>\r\n              <Field\r\n                id=\"indice\"\r\n                required\r\n                aria-required\r\n                name=\"indice\"\r\n                type=\"number\"\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"buttons-container\">\r\n            <button type=\"button\" onClick={() => navigateToCart()}>\r\n              Back to cart\r\n            </button>\r\n            <button type=\"submit\">Proceed to delivery</button>\r\n          </div>\r\n        </Form>\r\n      </Formik>\r\n      <div className=\"checkout-cart\">\r\n        {StoreItems(\"remove\", \"Remove from cart\", \"cart\")}\r\n        <div className=\"total-amount\">{`Total: ${cartTotalCost} â‚¬`}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"sourceRoot":""}